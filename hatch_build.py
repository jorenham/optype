# mypy: disable-error-code=redundant-cast
# ruff: noqa: PLR2004, PLR6301

import ctypes as ct
import datetime as dt
import functools
from collections.abc import Iterable
from dataclasses import dataclass
from pathlib import Path
from textwrap import indent
from typing import Any, Protocol, cast
from typing_extensions import override

from hatchling.builders.hooks.plugin.interface import BuildHookInterface
from hatchling.builders.wheel import WheelBuilderConfig

TAB = " " * 4
NEWLINE = "\n"
MAX_INLINE_LENGTH = 60


def _pyfmt(v: Any, /) -> str:  # noqa: C901, PLR0911, PLR0912
    """Convert primitive value to Python source code representation."""
    if isinstance(v, str):
        if '"' in v and "'" in v:
            return f'"""{v}"""'
        return f"'{v}'" if '"' in v else f'"{v}"'
    if isinstance(v, int | float | complex) or v is None:
        return str(v)
    if isinstance(v, type):
        return v.__qualname__
    if isinstance(v, tuple):
        if not v:
            return "()"
        v = cast("tuple[Any, ...]", v)
        str_items = [_pyfmt(item) for item in v]
        out_inline = ", ".join(str_items)
        if len(v) == 1:
            return f"({out_inline},)"
        if len(out_inline) < MAX_INLINE_LENGTH and NEWLINE not in out_inline:
            return out_inline
        return NEWLINE.join(["(", *[f"{indent(v, TAB)}," for v in str_items], ")"])
    if isinstance(v, list):
        if not v:
            return "[]"
        v = cast("list[Any]", v)
        str_items = [_pyfmt(item) for item in v]
        out_inline = "[" + ", ".join(str_items) + "]"
        if len(out_inline) < MAX_INLINE_LENGTH and NEWLINE not in out_inline:
            return out_inline
        return NEWLINE.join(["[", *[f"{indent(v, TAB)}," for v in str_items], "]"])
    if isinstance(v, dict):
        if not v:
            return "{}"
        v = cast("dict[Any, Any]", v)
        str_items = [f"{_pyfmt(k)}: {_pyfmt(v)}" for k, v in v.items()]
        out_inline = "{" + ", ".join(str_items) + "}"
        if len(out_inline) < MAX_INLINE_LENGTH and NEWLINE not in out_inline:
            return out_inline
        return NEWLINE.join(["{", *(f"{indent(kv, TAB)}," for kv in str_items), "}"])
    raise TypeError(type(v).__name__)


def _zulu_now(unit: str = "seconds", /) -> str:
    # ISO 8601 timestamp in Zulu (a.k.a. UTC and GMT+00:00) format
    # https://wikipedia.org/wiki/Military_time_zone
    return dt.datetime.now(tz=dt.UTC).isoformat("T", unit).replace("+00:00", "Z")


class _Expr(Protocol):
    def get_exports(self) -> set[str]: ...
    def get_source(self) -> str: ...


class _Blank:
    def get_exports(self) -> set[str]:
        return set()

    def get_source(self) -> str:
        return ""


@dataclass(frozen=True, slots=True)
class _Comment:
    comment: str | None = None

    def get_exports(self) -> set[str]:
        return set()

    def get_source(self) -> str:
        return "#" if self.comment is None else f"# {self.comment}"


@dataclass(frozen=True, slots=True)
class _ImportAs:
    name: str
    alias: str

    def get_exports(self) -> set[str]:
        return set()

    def get_source(self) -> str:
        return f"import {self.name} as {self.alias}"


@dataclass(frozen=True, slots=True)
class _Const:
    name: str
    value: Any

    def get_exports(self) -> set[str]:
        return {self.name}

    def get_source(self) -> str:
        return f"{self.name}: _t.Final = {_pyfmt(self.value)}"


def _build_consts_module(generator: str, /, expressions: Iterable[_Expr]) -> str:
    now = _zulu_now()

    exports: set[str] = set()
    for expr in expressions:
        exports |= expr.get_exports()

    lines = [
        f"# @generated by {generator} on {now}",
        "# !!! DO NOT EDIT !!!",
        "",
        f"__all__ = {_pyfmt(sorted(exports))}",
        "",
        *(expr.get_source() for expr in expressions),
        "",  # trailing newline
    ]
    return NEWLINE.join(lines)


class CustomBuildHook(BuildHookInterface[WheelBuilderConfig]):
    generated: list[Path]  # pyright: ignore[reportUninitializedInstanceVariable]

    @functools.cached_property
    def _out_path(self) -> Path:
        path = Path(self.root) / "optype" / "_constants.py"
        assert path.parent.is_dir(), path.parent
        return path

    @override
    def clean(self, versions: list[str]) -> None:
        self._out_path.unlink(missing_ok=True)
        return super().clean(versions)

    @override
    def initialize(self, /, version: str, build_data: dict[str, Any]) -> None:
        self.generated = []

        if self.target_name == "sdist":
            return None

        self.generated.append(self._out_path)
        for path in self.generated:
            build_data["artifacts"].append(str(path.relative_to(self.root)))

        metadata = self.metadata.core_raw_metadata  # pyright: ignore[reportUnknownMemberType]
        package_name = metadata["name"]
        package_version = metadata["version"]

        consts_src = _build_consts_module(
            f"{package_name} {package_version}",
            [
                _ImportAs("typing", "_t"),
                # project
                _Blank(),
                _Comment("project metadata"),
                _Const("NAME", package_name),
                _Const("DESCRIPTION", metadata["description"]),
                _Const("AUTHOR", metadata["authors"][0]["name"]),
                _Const("LICENSE", metadata["license"]),
                # version
                _Blank(),
                _Comment("version info"),
                _Const("VERSION", package_version),
                _Const("VERSION_MAJOR", int(package_version.split(".", 1)[0])),
                _Const("VERSION_MINOR", int(package_version.split(".", 2)[1])),
                _Const("VERSION_PATCH", int(package_version.split(".", 3)[2])),
                _Const("EDITABLE", version == "editable"),
                # C types
                _Blank(),
                _Comment("C types"),
                _Const("SIZEOF_BYTE", ct.sizeof(ct.c_byte)),
                _Const("SIZEOF_SHORT", ct.sizeof(ct.c_short)),
                _Const("SIZEOF_INT", ct.sizeof(ct.c_int)),
                _Const("SIZEOF_LONG", ct.sizeof(ct.c_long)),
                _Const("SIZEOF_LONGLONG", ct.sizeof(ct.c_longlong)),
                _Const("SIZEOF_SSIZE_T", sizeof_ssize_t := ct.sizeof(ct.c_ssize_t)),
                _Const("SIZEOF_FLOAT", ct.sizeof(ct.c_float)),
                _Const("SIZEOF_DOUBLE", ct.sizeof(ct.c_double)),
                _Const("SIZEOF_LONGDOUBLE", ct.sizeof(ct.c_longdouble)),
                # system
                _Blank(),
                _Comment("system"),
                _Const("IS_16BIT", sizeof_ssize_t == 2),
                _Const("IS_32BIT", sizeof_ssize_t == 4),
                _Const("IS_64BIT", sizeof_ssize_t == 8),
            ],
        )
        self._out_path.write_text(consts_src, encoding="utf-8", newline=NEWLINE)
        return super().initialize(version, build_data)
