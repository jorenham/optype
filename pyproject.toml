[build-system]
requires = ["uv_build>=0.8.11"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-root = ""

[project]
name = "optype"
description = "Building blocks for precise & flexible type hints"
version = "0.13.2"
authors = [{ name = "Joren Hammudoglu", email = "jhammudoglu@gmail.com" }]
license = "BSD-3-Clause"
license-files = ["LICENSE"]
readme = "README.md"
keywords = ["typing", "type hints", "numpy"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = ["typing-extensions>=4.10; python_version<'3.13'"]

[project.optional-dependencies]
numpy = [
  "numpy-typing-compat >=1.25.20250814",
]

[project.urls]
Repository = "https://github.com/jorenham/optype/"
Documentation = "https://github.com/jorenham/optype/blob/master/README.md"
Issues = "https://github.com/jorenham/optype/issues"
Changelog = "https://github.com/jorenham/optype/releases"
Funding = "https://github.com/sponsors/jorenham"

[dependency-groups]
extra = [
  "optype[numpy]",
]
lint = [
  "dprint-py>=0.50.1.4",
  "ruff>=0.12.9",
  "sp-repo-review[cli]>=2025.5.2",
]
test = [
  { include-group = "extra" },
  "beartype>=0.21.0",
  "pytest>=8.4.1",
  "typing-extensions>=4.14.1",
]
type = [
  { include-group = "extra" },
  { include-group = "test" },
  "basedpyright>=1.31.2",
  "mypy[faster-cache]>=1.17.1",
]
dev = [
  { include-group = "extra" },
  { include-group = "lint" },
  { include-group = "test" },
  { include-group = "type" },
]

# mypy

[tool.mypy]
packages = ["optype", "examples", "tests"]
local_partial_types = true
allow_redefinition_new = true

strict = true
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
enable_error_code = [
  "exhaustive-match",
  "ignore-without-code",
  "redundant-expr",
  "truthy-bool",
]
warn_return_any = false
warn_unreachable = false # numpy-typing-compat compat

# [based]pyright

[tool.pyright]
pythonPlatform = "All"
include = ["optype", "examples", "tests"]
ignore = [".venv"]
stubPath = "."
typeCheckingMode = "all"
useLibraryCodeForTypes = false
enableReachabilityAnalysis = true
reportAny = false
reportExplicitAny = false # sometimes there's no way around it
reportImplicitStringConcatenation = false # not a linter
reportPrivateUsage = false # dupe of PLC2701
reportPrivateImportUsage = false # dupe of PLC2701
reportShadowedImports = false # buggy
reportUnreachable = false # nothing wrong with `if sys.version_info() >= ...`
reportUnusedCallResult = false # https://github.com/microsoft/pyright/issues/8650
reportUnusedImport = false # dupe of F401
reportUnusedVariable = false # dupe of F841

# pytest

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["optype", "examples", "tests"]
addopts = ["-ra", "--doctest-modules", "--strict-config", "--strict-markers"]
doctest_optionflags = ["NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL", "ELLIPSIS"]
filterwarnings = ["error"]
log_cli_level = "INFO"
xfail_strict = true

# repo-review

[tool.repo-review]
ignore = [
  "PY004", # Has docs folder
  "PY006", # Has pre-commit-config
  "RTD100", # Uses ReadTheDocs
]

# tox

[tool.ruff]
src = ["optype", "examples", "tests"]
extend-exclude = [".git", ".mypy_cache", ".tox", ".venv"]
force-exclude = true
show-fixes = true
preview = true

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "ANN401", # flake8-annotations - any-type
  "S101", # flake8-bandit - assert
  "FBT", # flake8-boolean-trap
  "CPY", # flake8-copyright
  "FIX", # flake8-fixme
  "D", # pydocstyle
  "DOC201", # pydoclint - docstring-missing-returns
  "TRY003", # tryceratops - raise-vanilla-args
]

[tool.ruff.lint.flake8-builtins]
builtins-allowed-modules = [
  "copy",
  "dataclasses",
  "inspect",
  "io",
  "json",
  "pickle",
  "string",
  "types",
  "typing",
]

[tool.ruff.lint.flake8-errmsg]
max-string-length = 42 # this took a while to figure out

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"ctypes" = "ct"
"datetime" = "dt"
"numpy.typing" = "npt"
"optype.numpy" = "onp"
"optype.typing" = "opt"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["collections.abc", "types"]

[tool.ruff.lint.isort]
combine-as-imports = true
extra-standard-library = ["_typeshed", "typing_extensions"]
known-local-folder = ["optype"]
known-third-party = ["numpy"]

[tool.ruff.lint.pylint]
allow-dunder-method-names = [
  # instance methods
  "__self__",
  # classmethods
  "__func__",
  "__wrapped__",
  # `dlpack`
  "__dlpack__",
  "__dlpack_device__",
  # `numpy` special methods
  "__array__",
  "__array_finalize__",
  "__array_function__",
  "__array_priority__",
  "__array_ufunc__",
  "__array_wrap__",
  "__array_interface__",
  "__array_struct__",
]
allow-magic-value-types = ["int", "str"]

# tox

[tool.tox]
requires = ["tox-uv>=1"]
env_list = [
  "3.11",
  "3.12",
  "3.13",
  "3.14",
  "dprint",
  "ruff",
  "mypy",
  "pyright",
  "pyright-verify",
  "repo-review",
]

[tool.tox.env_run_base]
description = "test with {base_python}"
runner = "uv-venv-lock-runner"
dependency_groups = ["test"]
commands = [
  [
    "pytest",
    { replace = "posargs", default = [], extend = true },
  ],
]

[tool.tox.env.dprint]
description = "dprint check"
runner = "uv-venv-lock-runner"
dependency_groups = ["lint"]
commands = [
  [
    "dprint",
    "check",
    "--incremental=false",
    { replace = "posargs", default = [], extend = true },
  ],
]

[tool.tox.env.ruff]
description = "ruff check"
runner = "uv-venv-lock-runner"
dependency_groups = ["lint"]
commands = [
  [
    "ruff",
    "check",
    "--show-fixes",
    { replace = "posargs", default = [], extend = true },
  ],
  [
    "ruff",
    "format",
    "--check",
    { replace = "posargs", default = [], extend = true },
  ],
]

[tool.tox.env.mypy]
description = "mypy"
runner = "uv-venv-lock-runner"
dependency_groups = ["type"]
commands = [
  [
    "mypy",
    { replace = "posargs", default = ["."], extend = true },
  ],
]

[tool.tox.env.pyright]
description = "basedpyright"
runner = "uv-venv-lock-runner"
dependency_groups = ["type"]
commands = [
  [
    "basedpyright",
    { replace = "posargs", default = [], extend = true },
  ],
]

[tool.tox.env.pyright-verify]
description = "basedpyright --verifytypes"
runner = "uv-venv-lock-runner"
dependency_groups = ["type"]
commands = [["basedpyright", "--ignoreexternal", "--verifytypes", "optype"]]

[tool.tox.env.repo-review]
description = "repo-review"
runner = "uv-venv-lock-runner"
dependency_groups = ["lint"]
commands = [["repo-review", "."]]

[tool.typos.default]
extend-ignore-identifiers-re = [
  "ND|nd",
  "(N|n)in",
  "Mode(R|W|X|A|O|_)(B|T|_)(U|_)?",
  "ba", # file mode string
]
