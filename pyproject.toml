[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "optype"
version = "0.2.2"
description = "Building blocks for precise & flexible Python type hints"
authors = ["Joren Hammudoglu <jhammudoglu@gmail.com>"]
license = "BSD-3-Clause"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.group.dev.dependencies]
pre-commit = '^3.6.2'

[tool.poetry.group.lint.dependencies]
codespell = "^2.2.6"
pyright = "^1.1.354"
ruff = "^0.3.3"

[tool.poetry.group.test.dependencies]
pytest = "^8.1.1"

[tool.poetry.group.test-github]
optional = true
[tool.poetry.group.test-github.dependencies]
pytest-github-actions-annotate-failures = ">=0.2.0,<1.0"


[tool.codespell]
context = 2
ignore-words-list = "cange"  # CanGe
skip = """\
    ./.venv,\
    ./.vscode,\
    *.lock,\
    *.pyc,\
    *.js\
"""


[tool.pyright]
include = ["optype", "examples", "tests"]
exclude = [
    "**/__pycache__",
    "**/.vscode",
    ".venv",
    ".git",
    ".github",
    ".pytest_cache",
    ".ruff_cache",
    "dist",
]
stubPath = "."
venvPath = "."
venv = ".venv"
pythonVersion = "3.12"
pythonPlatform = "All"
typeCheckingMode = "strict"
useLibraryCodeForTypes = false

strictListInference = true
strictDictionaryInference = true
strictSetInference = true
deprecateTypingAliases = true
disableBytesTypePromotions = true
reportPropertyTypeMismatch = "error"
reportMissingTypeStubs = "error"
reportImportCycles = "error"
reportUnusedImport = "none"  # already covered by ruff
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportConstantRedefinition = "error"
reportInconsistentConstructor = "error"
reportMissingTypeArgument = "error"
reportUninitializedInstanceVariable = "error"
reportCallInDefaultInitializer = "error"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportImplicitStringConcatenation = "none"
reportInvalidStubStatement = "error"
reportIncompleteStub = "error"
# reportUnusedCallResult = "warning"
reportUnusedCoroutine = "error"
reportUnusedExpression = "warning"
reportUnnecessaryTypeIgnoreComment = "error"
reportMatchNotExhaustive = "error"
reportImplicitOverride = "warning"
reportShadowedImports = "error"


[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["optype", "examples", "tests"]
addopts = [
    "-ra",
    "--doctest-modules",
    "--exitfirst",
    "--showlocals",
    "--strict-config",
    "--strict-markers",
]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
    "ELLIPSIS",
]
filterwarnings = ["error"]
xfail_strict = true


[tool.ruff]
src = ["optype", "tests"]
target-version = "py312"
line-length = 79
indent-width = 4
show-fixes = true
force-exclude = true
extend-exclude = [".github", ".vscode"]

[tool.ruff.lint]
ignore-init-module-imports = true
preview = true
select = [
    "F",        # pyflakes
    "E",        # pycodestyle error
    "W",        # pycodestyle warning
    "I",        # isort
    "N",        # pep8-naming
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "ANN",      # flake8-annotations
    "BLE",      # flake8-blind-except
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "COM",      # flake8-commas
    "C4",       # flake8-comprehensions
    "DTZ",      # flake8-datetimez
    "T10",      # flake8-debugger
    "EXE",      # flake8-executable
    "FA",       # flake8-future-annotations
    "ISC",      # flake8-implicit-str-concat
    "ICN",      # flake8-import-conventions
    "G",        # flake8-logging-format
    "INP",      # flake8-no-pep420
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PYI",      # flake8-pyi
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SLF",      # flake8-self
    "SLOT",     # flake8-slots
    "SIM",      # flake8-simplify
    "TID",      # flake8-tidy-imports
    "TCH",      # flake8-type-checking
    "ARG",      # flake8-unused-arguments
    "PTH",      # flake8-use-pathlib
    # "ERA",      # eradicate   # (rebellion!)
    "PGH",      # pygrep-hooks
    "PL",       # pylint
    "TRY",      # tryceratops
    "FLY",      # flynt
    "PERF",     # perflint,
    "FURB",     # refurb
    "RUF",      # ruff
]
extend-ignore = [
    # flake8-annotations
    "ANN001",   # missing-type-function-argument (deprecated)
    "ANN002",   # missing-type-args (deprecated)
    "ANN401",   # any-type (unreasonable)

    # flake8-pyi
    "PYI036",   # bad-exit-annotation (FP with more precise overloads)

    # pylint
    "PLW1641",  # eq-without-hash (buggy; doesn't consider super)

    # refurb
    "FURB118",  # reimplemented-operator (that's kinda the point, bro)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # flake8-annotations
    "ANN201",   # missing-return-type-undocumented-public-function

    # flake8-self
    "SLF001",   # private-member-access
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["optype"]
lines-between-types = 0
lines-after-imports = 2

[tool.ruff.format]
# keep in sync with .editorconfig
line-ending = "lf"
indent-style = "space"
quote-style = "single"
docstring-code-format = true
skip-magic-trailing-comma = true
